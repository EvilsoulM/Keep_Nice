android {
    compileSdkVersion rootProject.ext.android_const.compileSdk
    buildToolsVersion rootProject.ext.android_const.buildTools

    defaultConfig {
        minSdkVersion rootProject.ext.android_const.minSdk
        targetSdkVersion rootProject.ext.android_const.targetSdk
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        javaMaxHeapSize "2048m"
    }

    dexOptions {
        preDexLibraries project.hasProperty('debug')
        incremental project.hasProperty('debug')
    }

    packagingOptions {
        exclude '.readme'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/.readme'
        exclude 'META-INF/readme.txt'
        exclude 'META-INF/README.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        abortOnError false
        textReport true
        textOutput 'stdout'
        checkAllWarnings true
        warningsAsErrors true
        disable 'PrivateResource' // Use AppCompat resources
    }

    (android.hasProperty('applicationVariants') ? android.'applicationVariants' : android.'libraryVariants').all { variant ->
        task("findbugs${variant.name.capitalize()}", type: FindBugs, dependsOn: "assemble${variant.name.capitalize()}") {
            group 'Reporting'
            description "Generate ${variant.name.capitalize()} Findbugs reports."

            ignoreFailures = true
            reports {
                xml.enabled = false
                html.enabled = true
            }

            effort = 'max'
            reportLevel = 'low'
            source = files(variant.javaCompiler.source)
            classpath = files(configurations.compile.files)
            classes = fileTree(
                    dir: variant.javaCompile.destinationDir,
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/Manifest*.*',
                               'android/**/*.*',
                               '**/BuildConfig.*'])
        }

        task("checkstyle${variant.name.capitalize()}", type: Checkstyle, dependsOn: "assemble${variant.name.capitalize()}") {
            group 'Reporting'
            description "Generate ${variant.name.capitalize()} Checkstyle reports."

            ignoreFailures = true
            // TODO generate HTML, 'reports.html' is not available
            reports {
                xml.enabled = true
            }

            configFile = rootProject.file('gradle/checkstyle-hard.xml')
            source = files(android.sourceSets.main.java.srcDirs)
            classpath = files(configurations.compile.files)
        }
    }
}