apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply from: rootProject.file('basegradle/commonProject.gradle')
apply from: rootProject.file('basegradle/commonAndroid.gradle')

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
}

android {
    defaultConfig {
        applicationId rootProject.ext.android_const.packageName
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            jniDebuggable true
        }

        release {
            minifyEnabled false
            shrinkResources false

            debuggable false
            jniDebuggable false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    configurations {
        all*.exclude group: 'com.google.android', module: 'android'
        all*.exclude group: 'com.google.android', module: 'support-v4'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'com.google.code.gson'
    }


    productFlavors {
        normal {

        }

        ddebug {
        }
    }
}

dependencies {
    compile project(':common')
    compile project(':model')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile rootProject.ext.app_dep.appcompat_v7
    compile rootProject.ext.app_dep.design
    compile rootProject.ext.app_dep.okio
    compile(rootProject.ext.app_dep.okhttp) {
        exclude group: 'com.squareup.okio', module: 'okio'
    }
    compile rootProject.ext.app_dep.glide
    debugCompile rootProject.ext.app_dep.debug_leakcanary
    releaseCompile rootProject.ext.app_dep.release_leakcanary
    apt rootProject.ext.app_dep.apt_logansquare
    compile rootProject.ext.app_dep.logansquare
    apt rootProject.ext.app_dep.apt_dagger
    compile rootProject.ext.app_dep.dagger
    compile rootProject.ext.app_dep.butterknife
    compile rootProject.ext.app_dep.rxjava
    compile rootProject.ext.app_dep.rxandroid
    compile rootProject.ext.app_dep.retrofit
    compile rootProject.ext.app_dep.converter_gson
    compile rootProject.ext.app_dep.adapter_rxjava
    compile 'org.aspectj:aspectjrt:1.8.1'
}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main


final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}