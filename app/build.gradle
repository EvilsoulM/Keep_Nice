apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply from: rootProject.file('basegradle/commonProject.gradle')
apply from: rootProject.file('basegradle/commonAndroid.gradle')
apply plugin: 'me.tatarka.retrolambda'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
}

android {
    defaultConfig {
        applicationId rootProject.ext.android_const.packageName
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            jniDebuggable true
        }

        release {
            minifyEnabled false
            shrinkResources false

            debuggable false
            jniDebuggable false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    configurations {
        all*.exclude group: 'com.google.android', module: 'android'
        all*.exclude group: 'com.google.android', module: 'support-v4'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'com.google.code.gson'
    }


    productFlavors {
        normal {

        }

        ddebug {
        }
    }

    android.applicationVariants.all { variant ->
        variant.assemble.doLast {
            String outname = "";
            variant.productFlavors.each { productFlavor ->
                println("productFlavor:" + productFlavor.name);
                outname += productFlavor.name;
            }

            println("buildType:" + variant.buildType.name);
            if (variant.buildType.name != 'release') { //是正式版本才进行资源混淆//"debug"
                return;
            }

            variant.outputs.each { output ->
                //注释以下一行可以取消自动资源混淆的方法
                runResourceGuard(output.outputFile, outname);
            }

        }
    }
}

dependencies {
    compile project(':common')
    compile project(':model')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile rootProject.ext.app_dep.appcompat_v7
    compile rootProject.ext.app_dep.design
    compile rootProject.ext.app_dep.okio
    compile(rootProject.ext.app_dep.okhttp) {
        exclude group: 'com.squareup.okio', module: 'okio'
    }
    compile rootProject.ext.app_dep.glide
    debugCompile rootProject.ext.app_dep.debug_leakcanary
    releaseCompile rootProject.ext.app_dep.release_leakcanary
    apt rootProject.ext.app_dep.apt_logansquare
    compile rootProject.ext.app_dep.logansquare
    apt rootProject.ext.app_dep.apt_dagger
    compile rootProject.ext.app_dep.dagger
    compile rootProject.ext.app_dep.rxjava
    compile rootProject.ext.app_dep.rxandroid
    compile rootProject.ext.app_dep.retrofit
    compile rootProject.ext.app_dep.converter_gson
    compile rootProject.ext.app_dep.adapter_rxjava
    compile 'org.aspectj:aspectjrt:1.8.1'
}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main


final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

/**微信资源混淆 task 如果不用就注销掉 上面的调用**/
void runResourceGuard(File outFile, String outName) {
    String finalOutDir = outFile.getParentFile().getAbsolutePath();

    String name = getFileNameWithoutExt(outFile.getName());
    if (outName == null || "".equals(outName)) {
        outName = name;
    }
    String outDirPath = "build/outputs/resguard/" + outName;

    println("输出目录:" + outDirPath);

    File outDir = file(outDirPath);
    if (outDir.exists()) {
        delete(outDir.getAbsolutePath());
    }
    outDir.mkdirs();

    //读取签名信息
    String storeFile = "keystore/xxxxx.keystore"
    String storePassword = "xxxx"
    String keyAlias = "xxxx"
    String keyPassword = "xxx"

    String commandExt = "";

    String zipalignPath = android.getSdkDirectory().getAbsolutePath() + "/build-tools/" + android.buildToolsVersion + "/zipalign" + commandExt;

    println("zipalignPath=" + zipalignPath);

    //执行资源混淆方法
    def exit = javaexec {
        main = "-jar"
        args = [
                "../resources/AndResGuard/resourcesproguard.jar",
                outFile.getAbsolutePath(),
                "-out", outDirPath,
                "-7zip", "../resources/command/7za" + commandExt,
                "-zipalign", zipalignPath,
                "-mapping", "../resources/AndResGuard/resource_mapping.txt"
//                "-signature", storeFile, storePassword, keyPassword, keyAlias
        ].toList()
    }

    println("运行结果:" + exit);
    if (exit.exitValue != 0) {
        return;
    }

    //将混淆后apk包替换原来的apk包
    name += "_signed_aligned.apk";
    File outApkFile = new File(outDir, name);

    outFile.delete();
    if (!outApkFile.exists()) {
        println("资源混淆文件失败！删除原文件！");
    } else {
        //自定义输出的文件名
        String orginalName = outFile.toString().subSequence(0, outFile.toString().indexOf(".apk"));
        String outputname = orginalName + "_recompressed";

        println("成功:" + outputname);
        String tempExt = "";

        int count = 0;
        while (true) {
            File temp = new File(finalOutDir, outputname + tempExt + ".apk");
            if (!temp.exists()) {
                break;
            }
            tempExt = "(" + (++count) + ")";
        }

        outputname += tempExt + ".apk";

        println("最终文件名为:" + outputname);

        copy {
            from(outDirPath) {
                include name
            }
            into finalOutDir
            rename(name, outputname)
        }
    }
}

String getFileNameWithoutExt(String filePath) {
    if (filePath == null || "".equals(filePath)) {
        return null;
    }
    int last = filePath.lastIndexOf("/");
    int index = filePath.lastIndexOf(".");
    if (last == -1 && index == -1) {
        return filePath;
    } else if (index > last) {
        return filePath.substring(last + 1, index);
    } else {
        return filePath.substring(last);
    }
}
